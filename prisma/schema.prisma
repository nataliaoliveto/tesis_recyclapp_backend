generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id                  String          @id @default(cuid())
  name                String          @db.VarChar(30)
  surname             String          @db.VarChar(30)
  mail                String          @unique @db.Citext
  phone               String          @db.VarChar(13)
  password            String          @db.VarChar(255)
  username            String          @unique @db.Citext
  isArchived          Boolean         @default(false)
  userType            UserType
  createDate          DateTime        @default(now())
  address             Address[]
  Advertisement       Advertisement[]
  ChatMessageReceived ChatMessage[]   @relation("chatReceiver")
  ChatMessageSent     ChatMessage[]   @relation("chatSender")
  Post                Post[]
  Rating              Rating?
  UserCustomer        UserCustomer?
  UserStore           UserStore?
}

model Address {
  id           String      @id @default(cuid())
  street       String      @db.VarChar(50)
  flat         String?     @db.VarChar(10)
  city         String      @db.VarChar(50)
  state        String      @db.VarChar(50)
  latitude     Float?
  longitude    Float?
  greenPointId String?     @unique
  userId       String?
  isArchived   Boolean     @default(false)
  postalCode   String      @db.VarChar(4)
  GreenPoint   GreenPoint? @relation(fields: [greenPointId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
}

model UserStore {
  id               String       @id @default(cuid())
  displayName      String       @unique @db.Citext
  userId           String       @unique
  expiryDate       DateTime     @db.Date
  hasBenefits      Boolean      @default(false)
  subscriptionId   String
  paymentCompleted Boolean      @default(false)
  Benefit          Benefit[]
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  User             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCustomer {
  id                String              @id @default(cuid())
  pointsCurrent     Int                 @default(0)
  pointsTotal       Int                 @default(0)
  userId            String              @unique
  BenefitAssignment BenefitAssignment[]
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id         String  @id @default(cuid())
  text       String  @db.VarChar(255)
  value      Int
  userId     String  @unique
  isArchived Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
}

model Advertisement {
  id               String       @id @default(cuid())
  durationStart    DateTime?    @db.Date
  durationEnd      DateTime?    @db.Date
  text             String       @db.VarChar(255)
  userId           String
  subscriptionId   String
  isArchived       Boolean      @default(false)
  paymentCompleted Boolean      @default(false)
  title            String       @db.VarChar(30)
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  user             User         @relation(fields: [userId], references: [id])
}

model Subscription {
  id             String          @id @default(cuid())
  name           String          @unique @db.Citext
  amount         Float
  duration       Int
  isArchived     Boolean         @default(false)
  advertisements Advertisement[]
  userStores     UserStore[]
}

model Donation {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(30)
  mail             String    @unique @db.Citext
  displayName      String    @db.VarChar(30)
  durationStart    DateTime? @db.Date
  durationEnd      DateTime? @db.Date
  isArchived       Boolean   @default(false)
  paymentCompleted Boolean   @default(false)
  subscriptionId   String
}

model Benefit {
  id                 String              @id @default(cuid())
  name               String              @db.VarChar(50)
  type               BenefitType
  endDate            DateTime            @db.Date
  quantity           Int
  pointsCost         Int
  userStoreId        String
  isActive           Boolean             @default(true)
  isArchived         Boolean             @default(false)
  userStore          UserStore           @relation(fields: [userStoreId], references: [id])
  benefitAssignments BenefitAssignment[]
}

model GreenPoint {
  id                String              @id @default(cuid())
  idpv              String              @unique @db.Citext
  name              String              @db.VarChar(50)
  availability      Json                @db.Json
  type              String              @db.VarChar(50)
  cooperative       String              @db.VarChar(200)
  hasOrganic        Boolean             @default(false)
  isArchived        Boolean             @default(false)
  Address           Address?
  materialComponent MaterialComponent[] @relation("GreenPointToMaterialComponent")
}

model Organic {
  id            String  @id @default(cuid())
  name          String  @unique @db.Citext
  isCompostable Boolean
  isArchived    Boolean @default(false)
}

model MaterialProduct {
  id                String              @id @default(cuid())
  name              String              @unique @db.Citext
  isArchived        Boolean             @default(false)
  Post              Post[]
  materialComponent MaterialComponent[] @relation("MaterialProductToMaterialComponent")
}

model MaterialComponent {
  id              String            @id @default(cuid())
  name            String            @unique @db.Citext
  recyclableType  RecyclableType
  description     String            @db.VarChar(1024)
  isArchived      Boolean           @default(false)
  GreenPoint      GreenPoint[]      @relation("GreenPointToMaterialComponent")
  MaterialProduct MaterialProduct[] @relation("MaterialProductToMaterialComponent")
}

model Post {
  id                String           @id @default(cuid())
  postNumber        Int              @unique @db.SmallInt
  quantity          Int              @db.SmallInt
  description       String           @db.VarChar(255)
  purpouse          PostPurpouse
  pointsAwared      Int
  userId            String
  materialProductId String
  isActive          Boolean          @default(true)
  isReserved        Boolean          @default(false)
  isArchived        Boolean          @default(false)
  Chat              Chat[]
  materialProduct   MaterialProduct  @relation(fields: [materialProductId], references: [id])
  userPost          User             @relation(fields: [userId], references: [id])
  PostCommitment    PostCommitment[]
}

model PostCommitment {
  id         String  @id @default(cuid())
  postId     String
  tokenCode  String  @db.VarChar(25)
  isActive   Boolean @default(true)
  isArchived Boolean @default(false)
  post       Post    @relation(fields: [postId], references: [id])
}

model Chat {
  id          String        @id @default(cuid())
  postId      String
  startDate   DateTime      @db.Date
  endDate     DateTime?     @db.Date
  isActive    Boolean       @default(true)
  isArchived  Boolean       @default(false)
  post        Post          @relation(fields: [postId], references: [id])
  ChatMessage ChatMessage[]
}

model ChatMessage {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  message    String   @db.VarChar(255)
  senderId   String
  receiverId String
  chatId     String
  isArchived Boolean  @default(false)
  chat       Chat     @relation(fields: [chatId], references: [id])
  receiver   User     @relation("chatReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("chatSender", fields: [senderId], references: [id])
}

model BenefitAssignment {
  id             String       @id @default(cuid())
  benefitId      String
  userCustomerId String
  generatedCode  String
  isActive       Boolean      @default(true)
  benefit        Benefit      @relation(fields: [benefitId], references: [id])
  userCustomer   UserCustomer @relation(fields: [userCustomerId], references: [id])
}

enum UserType {
  CUSTOMER
  STORE
}

enum BenefitType {
  DISCOUNT
  PRODUCT
  DOUBLEPRODUCT
}

enum RecyclableType {
  RECYCLABLE
  NO_RECYCLABLE
  DEPENDS
  ORGANIC
}

enum PostPurpouse {
  HAVE
  WANT
}
