generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Address {
  id         String  @id @default(cuid())
  street     String  @db.VarChar(50)
  flat       String? @db.VarChar(10)
  city       String  @db.VarChar(50)
  state      String  @db.VarChar(50)
  latitude   Float?
  longitude  Float?
  userId     String?
  isArchived Boolean @default(false)
  postalCode String  @db.VarChar(4)
}

model UserStore {
  id               String       @id @default(cuid())
  userId           String       @unique
  expiryDate       DateTime     @db.Date
  hasBenefits      Boolean      @default(false)
  subscriptionId   String
  paymentCompleted Boolean      @default(false)
  Benefit          Benefit[]
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
}

model UserCustomer {
  id                String              @id @default(cuid())
  pointsCurrent     Int                 @default(0)
  pointsTotal       Int                 @default(0)
  userId            String              @unique
  BenefitAssignment BenefitAssignment[]
  pointsHistory     UserPointsHistory[]
}

model Rating {
  id         String  @id @default(cuid())
  text       String  @db.VarChar(255)
  value      Int
  userId     String  @unique
  userName   String  @db.VarChar(24)
  isArchived Boolean @default(false)
}

model Advertisement {
  id               String       @id @default(cuid())
  durationStart    DateTime?    @db.Date
  durationEnd      DateTime?    @db.Date
  text             String       @db.VarChar(255)
  userId           String
  subscriptionId   String
  isArchived       Boolean      @default(false)
  paymentCompleted Boolean      @default(false)
  title            String       @db.VarChar(30)
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id             String          @id @default(cuid())
  name           String          @unique @db.Citext
  amount         Float
  duration       Int
  isArchived     Boolean         @default(false)
  advertisements Advertisement[]
  userStores     UserStore[]
}

model Benefit {
  id                 String              @id @default(cuid())
  name               String              @db.VarChar(50)
  type               BenefitType
  endDate            DateTime            @db.Date
  quantity           Int
  pointsCost         Int
  userStoreId        String
  isActive           Boolean             @default(true)
  isArchived         Boolean             @default(false)
  userStore          UserStore           @relation(fields: [userStoreId], references: [id])
  benefitAssignments BenefitAssignment[]
}

model MaterialProduct {
  id                String              @id @default(cuid())
  name              String              @unique @db.Citext
  isArchived        Boolean             @default(false)
  materialComponent MaterialComponent[]
  Post              Post[]
}

model MaterialComponent {
  id                String          @id @default(cuid())
  name              String          @unique @db.Citext
  description       String          @db.VarChar(1024)
  icon              String          @default("help-circle") @db.VarChar(64)
  isArchived        Boolean         @default(false)
  isRecyclable      Boolean
  materialProductId String
  materialProduct   MaterialProduct @relation(fields: [materialProductId], references: [id])
}

model Post {
  id                String          @id @default(cuid())
  quantity          Int             @db.SmallInt
  description       String          @db.VarChar(255)
  purpouse          PostPurpouse
  pointsAwarded     Int             @map("pointsAwared")
  userId            String
  username          String
  materialProductId String
  isActive          Boolean         @default(true)
  isArchived        Boolean         @default(false)
  Chat              Chat[]
  materialProduct   MaterialProduct @relation(fields: [materialProductId], references: [id])
  Comment           Comment[]
}

model Chat {
  id            String        @id @default(cuid())
  postId        String
  userPostId    String
  userCommentId String
  generatedCode String?
  startDate     DateTime      @default(now())
  endDate       DateTime?     @db.Date
  isActive      Boolean       @default(true)
  isArchived    Boolean       @default(false)
  post          Post          @relation(fields: [postId], references: [id])
  ChatMessage   ChatMessage[]

  @@unique([postId, userPostId, userCommentId])
}

model ChatMessage {
  id             String   @id @default(cuid())
  timestamp      DateTime @default(now())
  message        String   @db.VarChar(255)
  senderId       String
  senderUsername String
  chatId         String
  isArchived     Boolean  @default(false)
  chat           Chat     @relation(fields: [chatId], references: [id])
}

model BenefitAssignment {
  id             String       @id @default(cuid())
  benefitId      String
  userCustomerId String
  generatedCode  String
  isActive       Boolean      @default(true)
  benefit        Benefit      @relation(fields: [benefitId], references: [id])
  userCustomer   UserCustomer @relation(fields: [userCustomerId], references: [id])
}

model UserPointsHistory {
  id                    Int          @id @default(autoincrement())
  userCustomerId        String
  userCustomer          UserCustomer @relation(fields: [userCustomerId], references: [id])
  userId                String
  pointsChange          Int
  previousPointsCurrent Int
  newPointsCurrent      Int
  previousPointsTotal   Int
  newPointsTotal        Int
  description           String?
  createdAt             DateTime     @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  username  String
  message   String   @db.VarChar(255)
  timestamp DateTime @default(now())
}

enum UserType {
  CUSTOMER
  STORE
}

enum BenefitType {
  DISCOUNT
  PRODUCT
  DOUBLEPRODUCT
}

enum PostPurpouse {
  HAVE
  WANT
}
