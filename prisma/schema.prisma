// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  name                String          @db.VarChar(30)
  surname             String          @db.VarChar(30)
  mail                String          @unique @db.VarChar(50)
  phone               String          @db.VarChar(20)
  address             Address         @relation(fields: [addressId], references: [id])
  password            String          @db.VarChar(20)
  addressId           Int
  //photo:nanikore
  Rating              Rating[]
  Advertisement       Advertisement[]
  Post                Post[]
  ChatMessageSent     ChatMessage[]   @relation("chatSender")
  ChatMessageReceived ChatMessage[]   @relation("chatReceiver")
}

model Address {
  id         Int          @id @default(autoincrement())
  street     String       @db.VarChar(50)
  flat       String       @db.VarChar(10)
  city       String       @db.VarChar(50)
  state      String       @db.VarChar(50)
  postalCode String       @db.VarChar(10)
  latitude   Float        @db.DoublePrecision
  longitude  Float        @db.DoublePrecision
  User       User[]
  GreenPoint GreenPoint[]
}

model UserStore {
  id          Int       @id @default(autoincrement())
  displayName String    @unique @db.VarChar(30)
  // storeKey    String
  Benefit     Benefit[]
}

model UserCustomer {
  id              Int       @id @default(autoincrement())
  pointsCurrent   Int       @db.Integer
  pointsTotal     Int       @db.Integer // las DB no almacenan c√°lculos
  benefitsActive  Benefit[] @relation("benefitsActive")
  benefitsHistory Benefit[] @relation("benefitsHistory")
}

model Rating {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  text   String @db.VarChar(255)
  value  Int    @db.Integer
  userId Int
}

model Advertisement {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  durationStart  DateTime
  durationEnd    DateTime
  displayName    String       @db.VarChar(30)
  text           String       @db.VarChar(255)
  // photo           String
  userId         Int
  subscriptionId Int
}

model Subscription {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(10)
  amount         Float           @db.DoublePrecision
  duration       Int             @db.Integer
  advertisements Advertisement[]
}

model Benefit {
  id                    Int          @id @default(autoincrement())
  name                  String       @db.VarChar(20)
  type                  String       @db.VarChar(10)
  endDate               DateTime     
  quantity              Int          @db.Integer
  pointsCost            Int          @db.Integer
  isActive              Boolean      @db.Boolean
  userStore             UserStore    @relation(fields: [userStoreId], references: [id])
  userCustomerActive    UserCustomer @relation(name: "benefitsActive", fields: [userCustomerActiveId], references: [id])
  userCustomerHistory   UserCustomer @relation(name: "benefitsHistory", fields: [userCustomerHistoryId], references: [id])
  userStoreId           Int
  userCustomerActiveId  Int
  userCustomerHistoryId Int
}

model GreenPoint {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  availability Json           @db.Json
  type         String         @db.VarChar(15)
  address      Address        @relation(fields: [addressId], references: [id])
  materialType MaterialType[]
  organic      Organic[]
  addressId    Int
}

model Organic {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(50)
  // photo           String
  isCompostable Boolean     @db.Boolean
  GreenPoint    GreenPoint? @relation(fields: [greenPointId], references: [id])
  greenPointId  Int?
}

model Material {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(10)
  // photo           String
  description  String         @db.VarChar(255)
  materialType MaterialType[]
  Post         Post[]
}

model MaterialType {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(15)
  // photo           String
  type         String      @db.VarChar(15)
  GreenPoint   GreenPoint? @relation(fields: [greenPointId], references: [id])
  greenPointId Int?
  Material     Material?   @relation(fields: [materialId], references: [id])
  materialId   Int?
}

model Post {
  id             Int              @id @default(autoincrement())
  userPost       User             @relation(fields: [userId], references: [id])
  material       Material         @relation(fields: [materialId], references: [id])
  quantity       Int              @db.SmallInt
  description    String           @db.VarChar(255)
  purpouse       String           @db.VarChar(10)
  // photo       String
  pointsAwared   Int              @db.Integer
  isActive       Boolean          @db.Boolean
  isReserved     Boolean          @db.Boolean
  userId         Int
  materialId     Int
  PostCommitment PostCommitment[]
  Chat           Chat[]
}

model PostCommitment {
  id        Int     @id @default(autoincrement())
  tokenCode String  @db.VarChar(25)
  isActive  Boolean @db.Boolean
  post      Post    @relation(fields: [postId], references: [id])
  postId    Int
}

model Chat {
  id          Int           @id @default(autoincrement())
  post        Post          @relation(fields: [postId], references: [id])
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean       @db.Boolean
  postId      Int
  ChatMessage ChatMessage[]
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  sender     User     @relation(name: "chatSender", fields: [senderId], references: [id])
  receiver   User     @relation(name: "chatReceiver", fields: [receiverId], references: [id])
  timestamp  DateTime @default(now())
  message    String
  chat       Chat     @relation(fields: [chatId], references: [id])
  senderId   Int
  receiverId Int
  chatId     Int
}
