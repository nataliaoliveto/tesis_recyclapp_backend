generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext(map: "citext")]
}

// * CRUD OK
model User {
  id                  Int             @id @default(autoincrement())
  name                String          @db.VarChar(30)
  surname             String          @db.VarChar(30)
  mail                String          @unique @db.Citext
  phone               String          @db.VarChar(20)
  password            String          @db.VarChar(20)
  username            String          @unique @db.Citext
  isArchived          Boolean         @default(false)
  userType            UserType
  address             Address[]
  Advertisement       Advertisement[]
  ChatMessageReceived ChatMessage[]   @relation("chatReceiver")
  ChatMessageSent     ChatMessage[]   @relation("chatSender")
  Post                Post[]
  Rating              Rating[]
  UserStore           UserStore?
  UserCustomer        UserCustomer?
}

// * ENUM OK
enum UserType {
  CUSTOMER
  STORE
}

// * CRUD OK
model Address {
  id           Int         @id @default(autoincrement())
  street       String      @db.VarChar(50) //calle y numero
  flat         String      @db.VarChar(10) //dpto?
  city         String      @db.VarChar(50) //barrio/localidad
  state        String      @db.VarChar(50) //provincia/CABA
  latitude     Float
  longitude    Float
  greenPointId Int?        @unique
  userId       Int?
  isArchived   Boolean     @default(false)
  GreenPoint   GreenPoint? @relation(fields: [greenPointId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
}

// * CRUD OK
model UserStore {
  id          Int       @id @default(autoincrement())
  displayName String    @unique @db.Citext
  userId      Int       @unique
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Benefit     Benefit[]
}

// * CRUD OK
model UserCustomer {
  id              Int       @id @default(autoincrement())
  pointsCurrent   Int       @default(0)
  pointsTotal     Int       @default(0)
  userId          Int       @unique
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  benefitsActive  Benefit[] @relation("benefitsActive")
  benefitsHistory Benefit[] @relation("benefitsHistory")
}

// * CRUD OK
model Rating {
  id         Int     @id @default(autoincrement())
  text       String  @db.VarChar(255)
  value      Int
  userId     Int
  isArchived Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
}

// * CRUD OK
model Advertisement {
  id             Int          @id @default(autoincrement())
  durationStart  DateTime     @db.Date
  durationEnd    DateTime     @db.Date
  displayName    String       @db.VarChar(30)
  text           String       @db.VarChar(255)
  userId         Int
  subscriptionId Int
  isArchived     Boolean      @default(false)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

// * CRUD OK
model Subscription {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.Citext
  amount         Float
  duration       Int
  isArchived     Boolean         @default(false)
  advertisements Advertisement[]
}

// * CRUD OK
model Benefit {
  id                  Int            @id @default(autoincrement())
  name                String         @db.VarChar(20)
  type                BenefitType
  endDate             DateTime       @db.Date
  quantity            Int
  pointsCost          Int
  isActive            Boolean        @default(true)
  userStoreId         Int
  isArchived          Boolean        @default(false)
  userStore           UserStore      @relation(fields: [userStoreId], references: [id])
  userCustomerActive  UserCustomer[] @relation("benefitsActive")
  userCustomerHistory UserCustomer[] @relation("benefitsHistory")
}

// TODO: EVALUATE RANGE OF TYPES - WHAT DOES EACH ONE REPRESENT?
// * ENUM OK
enum BenefitType {
  DISCOUNT
  PRODUCT
  DOUBLEPRODUCT
}

// * CRUD OK
model GreenPoint {
  id                Int                 @id @default(autoincrement())
  idpv              String              @unique @db.Citext
  name              String              @db.VarChar(50)
  availability      Json                @db.Json
  type              String              @db.VarChar(50)
  cooperative       String              @db.VarChar(200)
  isArchived        Boolean             @default(false)
  Address           Address?
  materialComponent MaterialComponent[] @relation("GreenPointToMaterialComponent")
  hasOrganic        Boolean             @default(false)
}

// * CRUD OK
model Organic {
  id            Int     @id @default(autoincrement())
  name          String  @unique @db.Citext
  isCompostable Boolean
  isArchived    Boolean @default(false)
}

// * CRUD OK
model MaterialProduct {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.Citext
  isArchived        Boolean             @default(false)
  materialComponent MaterialComponent[] @relation("MaterialProductToMaterialComponent")
  Post              Post[]
}

// * CRUD OK
model MaterialComponent {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.Citext
  recyclableType  RecyclableType
  description     String            @db.VarChar(1024)
  isArchived      Boolean           @default(false)
  GreenPoint      GreenPoint[]      @relation("GreenPointToMaterialComponent")
  MaterialProduct MaterialProduct[] @relation("MaterialProductToMaterialComponent")
}

// TODO: EVALUATE RANGE OF TYPES - WHAT DOES EACH ONE REPRESENT?
// * ENUM OK
enum RecyclableType {
  RECYCLABLE
  NO_RECYCLABLE
  DEPENDS
  ORGANIC
}

// * CRUD OK
model Post {
  id                Int              @id @default(autoincrement())
  postNumber        Int              @unique @db.SmallInt
  quantity          Int              @db.SmallInt
  description       String           @db.VarChar(255)
  purpouse          PostPurpouse
  pointsAwared      Int
  isActive          Boolean          @default(true)
  isReserved        Boolean          @default(false)
  userId            Int
  materialProductId Int
  isArchived        Boolean          @default(false)
  Chat              Chat[]
  materialProduct   MaterialProduct  @relation(fields: [materialProductId], references: [id])
  userPost          User             @relation(fields: [userId], references: [id])
  PostCommitment    PostCommitment[]
}

// * ENUM OK
enum PostPurpouse {
  HAVE
  WANT
}

// * CRUD OK
model PostCommitment {
  id         Int     @id @default(autoincrement())
  tokenCode  String  @db.VarChar(25)
  isActive   Boolean @default(true)
  postId     Int
  isArchived Boolean @default(false)
  post       Post    @relation(fields: [postId], references: [id])
}

// * CRUD OK
model Chat {
  id          Int           @id @default(autoincrement())
  startDate   DateTime      @db.Date
  endDate     DateTime?     @db.Date
  isActive    Boolean       @default(true)
  postId      Int
  isArchived  Boolean       @default(false)
  post        Post          @relation(fields: [postId], references: [id])
  ChatMessage ChatMessage[]
}

// * CRUD OK
model ChatMessage {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  message    String   @db.VarChar(255)
  senderId   Int
  receiverId Int
  chatId     Int
  isArchived Boolean  @default(false)
  chat       Chat     @relation(fields: [chatId], references: [id])
  receiver   User     @relation("chatReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("chatSender", fields: [senderId], references: [id])
}
